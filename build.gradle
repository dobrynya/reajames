plugins {
    id "com.github.maiflai.scalatest" version "0.14"
    id "com.jfrog.bintray" version "1.7.3"
    id "org.scoverage" version "2.1.0"
}

apply plugin: "scala"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "org.scoverage"

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

project.version = "0.4"

configurations {
    codacy
}

dependencies {
    compile "org.scala-lang:scala-library:2.12+"
    compile "org.reactivestreams:reactive-streams:1.0.0.final"
    compile "org.slf4j:slf4j-api:1.7+"
    compile "org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1+"

    testCompile "org.scalatest:scalatest_2.12:3+"
    testCompile "org.apache.activemq:activemq-broker:+"
    testCompile "org.apache.activemq:activemq-kahadb-store:+"
    testCompile "com.typesafe.akka:akka-stream_2.12:2.4+"
    testCompile "io.swave:swave-core_2.12:+"
    testCompile "com.storm-enroute:scalameter_2.12:0.8.2"
    testCompile "io.monix:monix_2.12:2.3.0"
    testCompile("net.timewalker.ffmq:ffmq4-server:4.0.0") {
        exclude module: "jms"
        exclude module: "log4j"
    }
    testCompile "org.reactivestreams:reactive-streams-tck:1.0.0.final"
    testRuntime "ch.qos.logback:logback-classic:+"
    testRuntime "org.slf4j:log4j-over-slf4j:1.6+"
    testRuntime "org.pegdown:pegdown:1.6.0"

    scoverage "org.scoverage:scalac-scoverage-plugin_2.12:+",
              "org.scoverage:scalac-scoverage-runtime_2.12:+"

    codacy "com.github.codacy:codacy-coverage-reporter:-SNAPSHOT"
}

test {
    maxParallelForks = 1
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: checkScoverage) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = ["-l", "Scala", "-r", "${buildDir}/reports/scoverage/cobertura.xml"]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    classifier = 'scaladoc'
    from scaladoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives scaladocJar
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Reajames",
                "Implementation-Vendor": "ru.reajames",
                "Implementation-Version": project.version
        )
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "dobrynya"
            name "Dmitry Dobrynin"
            email "dobrynya@inbox.ru"
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact scaladocJar
            groupId "ru.reajames"
            artifactId "reajames"
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "ReaJaMeS is JMS in terms of Reactive Streams")
                root.appendNode("name", "Reajames")
                root.appendNode("url", "https://github.com/dobrynya/reajames")
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.properties.bintrayUser
    key = project.properties.bintrayApiKey

    pkg {
        repo = "maven"
        name = "reajames"
        vcsUrl = "https://github.com/dobrynya/reajames.git"
        licenses = ["Apache-2.0"]

        version {
            name = project.version
            released  = new Date()
        }
    }

    publications = ["MyPublication"]
}

checkScoverage {
    minimumRate = 0.85
}

check.dependsOn(sendCoverageToCodacy)